---
import AstroCode from 'astro/components/Code.astro';

type AstroCodeProps = Parameters<typeof AstroCode>[0];
type PureCodeProps = Partial<Pick<AstroCodeProps, 'lang' | 'code' | 'transformers' | 'meta' | 'theme'>>;

import Code from './Code.astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends PureCodeProps, Omit<HTMLAttributes<'div'>, 'lang'> {
  errorCode?: string;
	cursorShift?: number;
	inset?: (number | undefined)[];
	options?: string[];
	optionHighlight?: string;
}

const { errorCode = '' , options, optionHighlight = '', inset, cursorShift, style = '', lang, code, transformers, meta, theme, ...rest } = Astro.props;
const styleStr = `${
	Array.isArray(inset) ? `inset:${Array.from(inset.slice(0, 4), (val, index) => typeof val === 'number' ? `${val}${index & 1 ? 'ch' : 'lh'}` : (val ?? 'auto')).join(' ')};` : ''
}${
	typeof cursorShift === 'number' ? `--popover-cursor-shift:${cursorShift}ch;` : ''
}${style}`;
const splitter = optionHighlight ? ((option: string) => {
	const index = option.toLowerCase().indexOf(optionHighlight.toLowerCase());
	return index !== -1 ? [option.slice(0, index), option.slice(index, index + optionHighlight.length), option.slice(index + optionHighlight.length)] : [option];
}) : () => [];
---
{code && <div style={styleStr} data-popover-type="popover" {...rest}>
	<header data-error-code={errorCode}><slot></slot></header>
	<Code lang={lang} code={code} transformers={transformers} meta={meta} theme={theme} />
</div>}
{Array.isArray(options) && <ul style={styleStr} data-popover-type="autocomplete" {...rest}>
	{options.map(
		optionHighlight
		? option => <li>{splitter(option).map((chunk, index) => (index & 1) ? <em>{chunk}</em> : chunk)}</li>
		: option => <li>{option}</li>
	)}
</ul>}
<style lang="scss">
	@use '../styles/variables.scss' as vars;
	[data-popover-type] {
		position: absolute;
		border: 0.1em solid gray;
		border-radius: 0.2em;
		background: inherit;
		white-space-collapse: collapse;
		z-index: 1;
		
		&::before {
			content: '';
			position: absolute;
			left: var(--popover-cursor-shift, 0ch);
		}
	}
	[data-popover-type='popover'] {
		transform: translate(.5em, calc(0.5em - 100%));
		
		&::before {
			top: calc(100% + 0.5lh);
			width: 1.7ch;
			height: 2.2ch;
			background: url(../img/cursor-default.svg) 0/contain no-repeat;
		}
	}
	header {
		font-family: vars.$base-font;
		border-bottom: inherit;
		&:empty {
			display: none;
		}
		&:not([data-error-code=''])::after {
			content: ' ' attr(data-error-code);
			color: gray;
		}
	}
	pre, header {
		padding: 0.25em 0.5em;
	}
	[data-popover-type='autocomplete'] {
		list-style-type: '';
		transform: translate(.5em, calc(0.5em + 1lh));
		margin: 0;
		padding: 0;
		font-family: vars.$monospace-font;

		&::before {
			top: -1.1lh;
			height: 1lh;
			margin-left: -.075em;
			width: .1em;
			background-color: #aaa;
			animation: blink 1s steps(1) infinite;
		}
	}
	li {
		min-width: 20ch;
		padding: 0 .1em;
		&::before {
			content: '';
			display: inline-block;
			width: .8lh;
			height: .8lh;
			background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="orange" viewBox="0 0 16 16"><rect width="6.5" height="6" x="1.5" y="8" rx=".5"/><rect width="6.5" height="6" x="8" y="2" rx=".5"/><path d="M9.5 4H13m0 2H9.5m-3 4H3m0 2h3.5"/></svg>');
			margin-inline-end: .1em;
			vertical-align: middle;
		}
		&:first-of-type {
			background-color: #44f4;
		}
	}
	em {
		color: hsl(from currentColor 240deg 100% calc((l - 50) / 2 + 50));
	}
</style>