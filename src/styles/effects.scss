[effect]:not(p-fragment, [p-fragment]):not(:is(p-fragment, [p-fragment]) *) {
	transition-delay: var(--sliding-duration, 0);
}

@mixin effect($name, $props, $duration-factor: 1) {
	[effect~="#{$name}"] {
		opacity: 1;
		transition-duration: calc(var(--fragment-duration) * #{$duration-factor});
		transition-property: $props;
		@content(null);
		@each $hidden in true, false {
			&:is(p-fragment, [p-fragment])[aria-hidden='#{$hidden}'],
			&:not(p-fragment, [p-fragment]):#{if($hidden == true, 'is', 'not')}([aria-hidden='true'] *) {
				@content($hidden);
			}
		}
	}
}

@include effect(zoom, transform) using ($hidden) {
	@if $hidden == true {
		transform: scale(var(--initial-zoom, 0));
	} @else if $hidden == false {
		transform: scale(1);
	} @else {
		display: block;
	}
}
[effect~='zoom']:where([effect~='appear']) {
	transition-property: transform, opacity;
	&:where([aria-hidden='true']) {
		opacity: 0;
	}
}

@include effect(reveal, #{max-width, padding-inline, margin-inline, border-inline-width, overflow}) using ($hidden) {
	@if $hidden == true {
		max-width: 0;
		padding-inline: 0;
		margin-inline: 0;
		border-inline-width: 0;
		overflow: clip;
	} @else if $hidden == false {
		max-width: 100vw;
		overflow: visible;
	} @else {
		display: inline-block;
		transition-behavior: allow-discrete;
	}
}
@include effect(shrink, #{max-width, padding-inline, margin-inline, border-inline-width}) using ($hidden) {
	@if $hidden == true {
		max-width: 100vw;
	} @else if $hidden == false {
		max-width: 0;
		padding-inline: 0;
		margin-inline: 0;
		border-inline-width: 0;
	} @else {
		display: inline-block;
		overflow: clip;
	}
}
@include effect(insert, #{max-height, padding-block, margin-block, border-block-width, overflow}) using ($hidden) {
	@if $hidden == true {
		max-height: 0;
		padding-block: 0;
		margin-block: 0;
		border-block-width: 0;
		overflow: clip;
	} @else if $hidden == false {
		max-height: 100vh;
		overflow: visible;
	} @else {
		display: block;
		transition-behavior: allow-discrete;
	}
}
@include effect(collapse, #{max-height, padding-block, margin-block, border-block-width}) using ($hidden) {
	@if $hidden == true {
		max-height: 100vh;
	} @else if $hidden == false {
		max-height: 0;
		padding-block: 0;
		margin-block: 0;
		border-block-width: 0;
	} @else {
		display: block;
		overflow: clip;
	}
}
@include effect(strike, none) using ($hidden) {
	@if $hidden == false {
		&::before {
			inset-inline-end: 0;
		}
	} @else {
		position: relative;
		&::before {
			content: '';
			position: absolute;
			inset: 0;
			inset-inline-end: 100%;
			background: linear-gradient(to bottom, transparent calc(.5lh - .1em), red 0 calc(.5lh + .1em), transparent 0) 0 / auto 1lh;
			transition: inherit;
			transition-property: inset-inline-end;
			z-index: 1;
		}
	}
}
@include effect(highlight, none) using ($hidden) {
	@if $hidden == false {
		&::before {
			inset-inline-end: -.1em;
		}
	} @else {
		position: relative;
		&::before {
			content: '';
			position: absolute;
			inset: -.1em;
			inset-inline-end: calc(100% + .1em);
			background: linear-gradient(to right, var(--highlight-color, yellow) 0 100%);
			transition: inherit;
			transition-property: inset-inline-end;
			mix-blend-mode: soft-light;
			border-radius: .25em;
		}
	}
}
[effect~='highlight'] {
	&[effect~='red'] {
		--highlight-color: #faa;
	}
	&[effect~='blue'] {
		--highlight-color: turquoise;
	}
	&[effect~='green'] {
		--highlight-color: palegreen;
	}
}
@include effect(falling, transform, 2) using ($hidden) {
	@if $hidden == true {
		transform: translateY(var(--from, -50vh));
	} @else if $hidden == false {
		transform: translateY(var(--to, 0));
	} @else {
		transition-timing-function: var(--bounce);
		display: inline-block;
	}
}
@include effect(drawing, stroke-dasharray) using ($hidden) {
	@if $hidden == true {
		stroke-dasharray: 0px var(--length, 0px);
		stroke-width: 0;
	} @else if $hidden == false {
		stroke-dasharray: var(--length, 0px) var(--length, 0px);
	}
}
@include effect(highlight1, background-size) using ($hidden) {
	@if $hidden == false {
		background-size: 100%;
	} @else {
		background: linear-gradient(to right, var(--highlight-color, #663) 0 100%) 0 / 0% auto no-repeat;
		mix-blend-mode: difference;
	}
}
@include effect(dim, opacity) using ($hidden) {
	@if $hidden == false {
		opacity: var(--dim-value, .3);
	}
}
@include effect(snatch, #{translate, filter}) using ($hidden) {
	@if $hidden == true {
		translate: var(--from, 0 0);
		filter: brightness(1);
	} @else if $hidden == false {
		translate: var(--to, 0 0);
		filter: brightness(var(--brightness, 1.5));
	} @else {
		position: absolute;
		inset: 0 auto auto 0;
		
		&:is(pre) {
			margin-block: .5em;
			padding-block: 0;
		}
	}
}
@supports (width: calc-size(auto, size)) {
	@include effect(reveal, #{width, padding-inline, margin-inline, border-inline-width, overflow}) using ($hidden) {
		@if $hidden == true {
			max-width: unset;
			width: 0;
		} @else if $hidden == false {
			width: calc-size(auto, size);
		}
	}
	@include effect(shrink, #{width, padding-inline, margin-inline, border-inline-width}) using ($hidden) {
		@if $hidden == true {
			width: calc-size(auto, size);
		} @else if $hidden == false {
			max-width: unset;
			width: 0;
		}
	}
	@include effect(insert, #{height, padding-block, margin-block, border-block-width, overflow}) using ($hidden) {
		@if $hidden == true {
			max-height: unset;
			height: 0;
		} @else if $hidden == false {
			height: calc-size(auto, size);
		}
	}
	@include effect(collapse, #{height, padding-block, margin-block, border-block-width}) using ($hidden) {
		@if $hidden == true {
			height: calc-size(auto, size);
		} @else if $hidden == false {
			max-height: unset;
			height: 0;
		}
	}
}

@include effect(from, translate) using ($hidden) {
	@if $hidden == true {
		translate: var(--from, 0 0);
	} @else if $hidden == false {
		translate: var(--to, 0 0);
	} @else {
		position: relative;
	}
}
[effect~='from'] {
	&[effect~='top'] { --from: 0 -100cqh; }
	&[effect~='right'] { --from: 100cqw 0; }
	&[effect~='bottom'] { --from: 0 100cqh; }
	&[effect~='left'] { --from: -100cqw 0; }
}
