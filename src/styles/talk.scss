@use './variables.scss' as vars;

:root {
	--overshoot: linear(0, 1.32 16%, 0.87 28%, 1.05 44%, 0.98 59%, 1.01 73%, 1 88%, 1);
	--bounce: linear(
		0,
		0.004,
		0.016,
		0.035,
		0.063,
		0.098,
		0.141 13.6%,
		0.25,
		0.391,
		0.563,
		0.765,
		1,
		0.891 40.9%,
		0.848,
		0.813,
		0.785,
		0.766,
		0.754,
		0.75,
		0.754,
		0.766,
		0.785,
		0.813,
		0.848,
		0.891 68.2%,
		1 72.7%,
		0.973,
		0.953,
		0.941,
		0.938,
		0.941,
		0.953,
		0.973,
		1,
		0.988,
		0.984,
		0.988,
		1
	);
	--wc-bg: linear-gradient(-150deg, rgba(42, 123, 155, 1) 0%, rgba(87, 199, 133, 1) 50%, rgba(237, 221, 83, 1) 100%);
}

.redacted {
	font-family: 'Redacted Script';
}

.big-x {
	position: absolute;
	aspect-ratio: 4 / 3;
	display: grid;
	opacity: 1;

	&::before,
	&::after {
		content: '';
		background-size: 100% 20%;
		background-position: center;
		background-repeat: no-repeat;
		background-clip: content-box;
		filter: saturate(0.8);
		box-sizing: border-box;
		grid-area: 1 / 1;
		padding-inline-end: 100%;
		transition: padding-inline-end calc(var(--fragment-duration) / 2);
	}
	&::before {
		background-image: url(../img/brush-stroke-1.png);
		transform: rotate(-30deg);
	}
	&::after {
		background-image: url(../img/brush-stroke-2.png);
		transform: rotate(30deg);
	}

	&[aria-hidden='false'] {
		&::before,
		&::after {
			padding-inline-end: 0%;
		}
		&::after {
			transition-delay: calc(var(--fragment-duration) / 2);
		}
	}
}

@keyframes from-below {
	from {
		translate: 0 100%;
	}
	to {
		translate: 0 0;
	}
}

text {
	font-family: vars.$monospace-font;
	font-size: 5px;
	font-weight: bold;
	text-anchor: middle;
	alignment-baseline: middle;
}
.git-tree {
	line,
	path:not(marker > path) {
		stroke: #dd0031;
		stroke-width: 10px;
		stroke-linecap: round;
	}
	path:not(marker > path) {
		stroke-width: 6px;
		fill: none;

		&.merge {
			stroke-width: 1px;
			marker-end: url(#arrow);
			marker-mid: none;
			stroke: #8e0022;
		}
		&.commits {
			marker-end: url(#commit);
			marker-mid: url(#commit);
		}
	}
	:not(line) + text {
		transform: rotate(-90deg);
		text-anchor: end;
		font-size: 3px;
	}
}

:is(line, path, polyline, polygon).arrow {
	fill: none;
	marker-end: url('#arrow-head');
	&.double {
		marker-start: url('#arrow-head');
	}
	&:not([stroke]) {
		stroke: #000;
	}
}

[effect]:not(p-fragment, [p-fragment]):not(:is(p-fragment, [p-fragment]) *) {
  transition-delay: var(--sliding-duration, 0);
}

@mixin effect($name, $props, $duration-factor: 1) {
  [effect~="#{$name}"] {
    opacity:31;
		transition-duration: calc(var(--fragment-duration) * #{$duration-factor});
		transition-property: $props;
    @content(null);
    @each $hidden in true, false {
      &:is(p-fragment, [p-fragment])[aria-hidden='#{$hidden}'],
      &:not(p-fragment, [p-fragment]):#{if($hidden == true, 'is', 'not')}([aria-hidden='true'] *) {
        @content($hidden);
      }
    }
  }
}

@include effect(zoom, transform) using ($hidden) {
  @if $hidden == true {
    transform: scale(0);
  } @else if $hidden == false {
    transform: scale(1);
  } @else {
    display: block;
  }
}

@include effect(reveal, #{max-width, padding-inline}) using ($hidden) {
  @if $hidden == true {
    max-width: 0;
    padding-inline: 0;
  } @else if $hidden == false {
    max-width: 100vw;
  } @else {
    display: inline-block;
    overflow: clip;
  }
}
@include effect(shrink, #{max-width, padding-inline}) using ($hidden) {
  @if $hidden == true {
    max-width: 100vw;
  } @else if $hidden == false {
    max-width: 0;
    padding-inline: 0;
  } @else {
    display: inline-block;
    overflow: clip;
  }
}
@include effect(insert, #{max-height, padding-block}) using ($hidden) {
  @if $hidden == true {
    max-height: 0;
    padding-block: 0;
  } @else if $hidden == false {
    max-height: 100vh;
  } @else {
    display: block;
    overflow: clip;
  }
}
@include effect(collapse, #{max-height, padding-block}) using ($hidden) {
  @if $hidden == true {
    max-height: 100vh;
  } @else if $hidden == false {
    max-height: 0;
    padding-block: 0;
  } @else {
    display: block;
    overflow: clip;
  }
}
@include effect(strike, none) using ($hidden) {
  @if $hidden == false {
    &::before {
      inset-inline-end: 0;
    }
  } @else {
    position: relative;
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      inset-inline-end: 100%;
      background: linear-gradient(to bottom, transparent calc(.5lh - .1em), red 0 calc(.5lh + .1em), transparent 0) 0 / auto 1lh;
      transition: inherit;
      transition-property: inset-inline-end;
    }
  }
}
@include effect(highlight, none) using ($hidden) {
  @if $hidden == false {
    &::before {
      inset-inline-end: 0;
    }
  } @else {
    position: relative;
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      inset-inline-end: 100%;
      background: linear-gradient(to right, var(--highlight-color, yellow) 0 100%);
      transition: inherit;
      transition-property: inset-inline-end;
			mix-blend-mode: soft-light;
    }
  }
}
[effect~='highlight'] {
	&[effect~='red'] {
		--highlight-color: #faa;
	}
	&[effect~='blue'] {
		--highlight-color: cyan;
	}
}
@include effect(falling, transform, 2) using ($hidden) {
  @if $hidden == true {
    transform: translateY(var(--from, -50vh));
  } @else if $hidden == false {
    transform: translateY(var(--to, 0));
  } @else {
    transition-timing-function: var(--bounce);
    display: inline-block;
  }
}
@include effect(drawing, stroke-dasharray, 2) using ($hidden) {
  @if $hidden == true {
    stroke-dasharray: 0px var(--length, 0px);
		stroke-width: 0;
  } @else if $hidden == false {
    stroke-dasharray: var(--length, 0px) var(--length, 0px);
  }
}
@include effect(highlight1, background-size) using ($hidden) {
  @if $hidden == false {
    background-size: 100%;
  } @else {
    background: linear-gradient(to right, var(--highlight-color, #663) 0 100%) 0 / 0% auto no-repeat;
    mix-blend-mode: difference;
  }
}
@include effect(dim, opacity) using ($hidden) {
  @if $hidden == false {
    opacity: var(--dim-value, .3);
  }
}
@include effect(snatch, #{translate, filter}) using ($hidden) {
  @if $hidden == true {
		translate: var(--from, 0 0);
		filter: brightness(1);
	} @else if $hidden == false {
		translate: var(--to, 0 0);
		filter: brightness(var(--brightness, 1.5));
  } @else {
		position: absolute;
		inset: 0 auto auto 0;
		
		&:is(pre) {
			margin-top: .5em;
			padding-block: 0;
		}
	}
}
@supports (width: calc-size(auto, size)) {
  @include effect(reveal, #{width, padding-inline}) using ($hidden) {
    @if $hidden == true {
      max-width: unset;
      width: 0;
    } @else if $hidden == false {
      width: calc-size(auto, size);
    }
  }
  @include effect(shrink, #{width, padding-inline}) using ($hidden) {
    @if $hidden == true {
      width: calc-size(auto, size);
    } @else if $hidden == false {
      max-width: unset;
      width: 0;
    }
  }
  @include effect(insert, #{height, padding-block}) using ($hidden) {
    @if $hidden == true {
      max-height: unset;
      height: 0;
    } @else if $hidden == false {
      height: calc-size(auto, size);
    }
  }
  @include effect(collapse, #{height, padding-block}) using ($hidden) {
    @if $hidden == true {
      height: calc-size(auto, size);
    } @else if $hidden == false {
      max-height: unset;
      height: 0;
    }
  }
}

g.shiki {
	font-size: 5px;
	line-height: 1.125;
	font-family: vars.$monospace-font;

	text {
		text-anchor: start;
		dominant-baseline: text-before-edge;
		font-size: inherit;
		font-family: inherit;
	}
}

.overlay-banner {
	position: absolute;
	inset: 0;
	margin-block: auto;
	height: fit-content;
	background-color: rgba(black, 0.5);
	color: white;
	text-shadow: 0 0.1em 0.2em rgba(black, 0.5);
	text-align: center;
	line-height: 1.5;
	z-index: 10;
}

hgroup {
	background: var(--wc-bg) 0 0/.5em auto no-repeat;
	padding-inline-start: 1em;

	> p {
		font-size: 150%;
	}

	strong {
		background: var(--wc-bg);
		background-clip: text;
		color: transparent;
	}
}