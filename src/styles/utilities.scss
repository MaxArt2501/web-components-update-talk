[flex] {
	display: flex;
}
[grid] {
	display: grid;
	gap: 1em;
}

@each $wrap in wrap wrap-reverse {
	[flex~="#{$wrap}"] {
		flex-wrap: #{$wrap};
	}
}
@each $direction in row column row-reverse column-reverse {
	[flex~="#{$direction}"] {
		flex-direction: #{$direction};
	}
}

.grow {
	flex-grow: 1;
}

@for $level from 1 through 6 {
	.h#{$level} {
		font-size: 0.75em + (7 - $level) * 0.25em;
	}
}
@for $level from 1 through 9 {
	.s#{$level} {
		font-size: $level * 1em;
	}
	.s#{$level}\.5 {
		font-size: $level * 1em + 0.5em;
	}
	.s0#{$level} {
		font-size: $level * 0.1em;
	}
	.gap-#{$level} {
		gap: $level * 1em;
	}
	.gap-#{$level}\.5 {
		gap: $level * 1em + 0.5em;
	}
	.gap-0#{$level} {
		gap: $level * 0.1em;
	}
	.lh-1#{$level} {
		line-height: $level * 0.1 + 1;
	}
	.lh-0#{$level} {
		line-height: $level * 0.1;
	}
	.span-#{$level} {
		grid-column-end: span $level;
	}
	[grid="#{$level}"] {
		grid-template-columns: repeat(#{$level}, minmax(0, 1fr));
	}
}
.lh-10 {
	line-height: 1;
}

.center {
	text-align: center;
}

.nowrap {
	white-space: nowrap;
}

@each $position in absolute relative {
	.#{$position} {
		position: $position;
	}
}

.stack {
	display: grid;
	> * {
		grid-area: 1 / 1;
	}
}

.strike-out {
	-webkit-text-stroke: hsl(from currentColor h s calc(100 - l)) .05em;
	paint-order: stroke fill;
}

@each $alignment in center start end stretch {
	.content-#{$alignment} {
		place-content: $alignment;
	}
	.items-#{$alignment} {
		place-items: $alignment;
	}
	.self-#{$alignment} {
		align-self: $alignment;
	}
	.align-#{$alignment} {
		align-items: $alignment;
	}
	.justify-#{$alignment} {
		justify-content: $alignment;
	}
}
@each $space in around between evenly {
	.justify-#{$space} {
		justify-content: space-#{$space};
	}
}

.bold {
	font-weight: bold;
}
.italic {
	font-style: italic;
}

.no-margins {
	margin: 0;
}
.no-padding {
	padding: 0;
}
.uppercase {
	text-transform: uppercase;
}
.no-clip {
	overflow: visible;
	&:is(.astro-code) {
		overflow: visible !important;
	}
}

@supports (height: attr(h em)) {
	[h] {
		height: attr(h em);
	}
	:is([h$='px'], [h$='rem'], [h$='lh'], [h$='rlh'], [h$='ch'], [h$='%']) {
		height: attr(h type(#{'<length-percentage>'}));
	}
	[w] {
		width: attr(w em);
	}
	:is([w$='px'], [w$='rem'], [w$='lh'], [w$='rlh'], [w$='ch'], [w$='%']) {
		width: attr(w type(#{'<length-percentage>'}));
	}
	[flex] {
		flex-flow: attr(flex type(#{'*'}));
	}
	[grid] {
		grid-template-columns: repeat(attr(grid type(#{'<integer>'})), minmax(0, 1fr));
	}
	@each $prop in top right bottom left gap {
		[#{$prop}] {
			#{$prop}: attr(#{$prop} em);
		}
		:is([#{$prop}$='px'], [#{$prop}$='rem'], [#{$prop}$='lh'], [#{$prop}$='rlh'], [#{$prop}$='ch'], [#{$prop}$='%']) {
			#{$prop}: attr(#{$prop} type(#{'<length-percentage>'}));
		}
	}
}

.full-media {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.blink {
  animation: blink 1s steps(1) infinite;
  @media print {
    animation: none;
  }
}

@keyframes blink {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}

.meme-text {
	font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
	color: white;
	-webkit-text-stroke: black 0.05em;
	text-transform: uppercase;
}
